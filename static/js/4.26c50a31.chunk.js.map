{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","className","s","descriptionBlock","src","photos","large","alt","Preloader","Post","item","message","maxLength30","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","validate","required","placeholder","MyPosts","React","memo","postsElements","posts","map","p","likesCount","likes","key","id","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.26c50a31.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1JhZL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__rs2iK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3iaxL\",\"posts\":\"MyPosts_posts__34P68\"};","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect( () => {\r\n        setStatus(props.status);\r\n    }, [props.status]);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onClick={activateEditMode}>\r\n                        {props.status || 'no status'}\r\n                    </span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true}  value={status} />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.descriptionBlock}> \r\n                <img src={profile.photos.large} alt=\"avatar\" />\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img src='https://i.pinimg.com/originals/00/3c/c9/003cc9a6329b24fdb4c1a2f843766d25.jpg' alt=\"avatar\" />\r\n            { props.message }\r\n            <div>\r\n                <span>like</span>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport Post from './Post/Post';\r\nimport s from './MyPosts.module.css';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { required, maxLengthCreator } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength30 = maxLengthCreator(30);\r\n\r\nlet AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field \r\n                    component={Textarea} \r\n                    name='newPostText'\r\n                    validate={[required, maxLength30]} \r\n                    placeholder='Post Message'    \r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm({form: 'ProfileAddNewPostForm'})(AddNewPostForm);\r\n\r\n\r\nconst MyPosts = React.memo(props => {\r\n    let postsElements = props.posts\r\n        .map( (p) => <Post message={p.message} likesCount={p.likes} key={p.id} /> );\r\n\r\n    // let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My Posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\n\r\nexport default MyPosts;","import { addPostActionCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPosts from './MyPosts';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}; \r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\n\r\nconst Profile = (props) => {\r\n\r\n    return (\r\n        <main>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getUserProfile, getStatus, updateStatus } from '../../redux/profile-reducer';\r\nimport { compose } from 'redux';\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n        return <Profile \r\n            {...this.props} \r\n            profile={this.props.profile} \r\n            status={this.props.status} \r\n            updateStatus={this.props.updateStatus} />\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    });\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter\r\n)(ProfileContainer);\r\n"],"sourceRoot":""}